# Generated by Django 5.2.6 on 2025-10-15 19:04

from django.db import migrations
from decimal import Decimal


def migrate_credit_sales_to_ar(apps, schema_editor):
    """
    Convert existing credit sales to AR system.
    
    For each Sale with payment_type='CREDIT':
    1. Set is_credit_sale = True
    2. Create AccountsReceivable record
    3. Update CreditTransaction references to point to AR
    """
    Sale = apps.get_model('sales', 'Sale')
    AccountsReceivable = apps.get_model('sales', 'AccountsReceivable')
    CreditTransaction = apps.get_model('sales', 'CreditTransaction')
    
    # Get all credit sales
    credit_sales = Sale.objects.filter(payment_type='CREDIT')
    
    migrated_count = 0
    skipped_count = 0
    error_count = 0
    
    for sale in credit_sales:
        try:
            # Check if AR already exists (avoid duplicates)
            if hasattr(sale, 'accounts_receivable'):
                print(f"  ‚ö†Ô∏è  AR already exists for sale {sale.receipt_number}, skipping")
                skipped_count += 1
                continue
            
            # Set credit flag
            sale.is_credit_sale = True
            sale.save(update_fields=['is_credit_sale'])
            
            # Create AR record
            ar = AccountsReceivable.objects.create(
                sale=sale,
                customer=sale.customer,
                original_amount=sale.total_amount,
                amount_paid=sale.amount_paid,
                amount_outstanding=sale.amount_due,
                created_at=sale.created_at,
                created_by=sale.user,  # Use sale creator as AR creator
                notes='Migrated from legacy credit sale system'
            )
            
            # Update CreditTransaction references
            # OLD: reference_id pointed to Sale.id (UUID)
            # NEW: reference_id should point to AR.id (UUID)
            updated_txns = CreditTransaction.objects.filter(
                customer=sale.customer,
                transaction_type='CREDIT_SALE',
                reference_id=sale.id  # Old reference to Sale
            ).update(
                reference_id=ar.id  # New reference to AR
            )
            
            print(f"  ‚úÖ Migrated sale {sale.receipt_number} ‚Üí AR {ar.id} (updated {updated_txns} transactions)")
            migrated_count += 1
            
        except Exception as e:
            print(f"  ‚ùå Error migrating sale {sale.receipt_number}: {e}")
            error_count += 1
    
    print(f"\nüìä Migration Summary:")
    print(f"   Total credit sales found: {credit_sales.count()}")
    print(f"   Successfully migrated: {migrated_count}")
    print(f"   Skipped (already migrated): {skipped_count}")
    print(f"   Errors: {error_count}")


def reverse_migration(apps, schema_editor):
    """
    Reverse the migration - remove AR records created by migration.
    """
    AccountsReceivable = apps.get_model('sales', 'AccountsReceivable')
    Sale = apps.get_model('sales', 'Sale')
    
    # Find AR records created by migration
    migrated_ars = AccountsReceivable.objects.filter(
        notes__contains='Migrated from legacy credit sale system'
    )
    
    count = migrated_ars.count()
    
    # Reset is_credit_sale flag on associated sales
    for ar in migrated_ars:
        ar.sale.is_credit_sale = False
        ar.sale.save(update_fields=['is_credit_sale'])
    
    # Delete migrated AR records
    migrated_ars.delete()
    
    print(f"‚úÖ Reversed migration: Removed {count} AR records and reset is_credit_sale flags")


class Migration(migrations.Migration):

    dependencies = [
        ('sales', '0007_sale_is_credit_sale_accountsreceivable_arpayment_and_more'),
    ]

    operations = [
        migrations.RunPython(
            migrate_credit_sales_to_ar,
            reverse_migration
        ),
    ]
