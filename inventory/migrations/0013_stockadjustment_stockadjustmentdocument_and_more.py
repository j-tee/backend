# Generated by Django 5.2.6 on 2025-10-06 08:41

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0004_user_platform_role'),
        ('inventory', '0012_add_barcode_field'),
        ('sales', '0005_auto_20251003_2241'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='StockAdjustment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('adjustment_type', models.CharField(choices=[('THEFT', 'Theft/Shrinkage'), ('DAMAGE', 'Damage/Breakage'), ('EXPIRED', 'Expired Product'), ('SPOILAGE', 'Spoilage'), ('LOSS', 'Lost/Missing'), ('SAMPLE', 'Sample/Promotional Use'), ('WRITE_OFF', 'Write-off'), ('SUPPLIER_RETURN', 'Return to Supplier'), ('CUSTOMER_RETURN', 'Customer Return'), ('FOUND', 'Found Item'), ('CORRECTION_INCREASE', 'Inventory Count Correction (Increase)'), ('CORRECTION', 'Inventory Count Correction'), ('RECOUNT', 'Physical Count Adjustment'), ('TRANSFER_OUT', 'Transfer Out'), ('TRANSFER_IN', 'Transfer In'), ('OTHER', 'Other')], max_length=50)),
                ('quantity', models.IntegerField(help_text='Positive for increases, negative for decreases')),
                ('unit_cost', models.DecimalField(decimal_places=2, help_text='Cost per unit at time of adjustment', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('total_cost', models.DecimalField(decimal_places=2, help_text='Total financial impact (auto-calculated)', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('reason', models.TextField(help_text='Detailed reason for adjustment')),
                ('reference_number', models.CharField(blank=True, help_text='External reference (e.g., police report number, supplier RMA)', max_length=100, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Approval'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('COMPLETED', 'Completed')], default='PENDING', max_length=20)),
                ('requires_approval', models.BooleanField(default=True, help_text='Whether this adjustment needs manager approval')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('has_photos', models.BooleanField(default=False)),
                ('has_documents', models.BooleanField(default=False)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_adjustments_approved', to=settings.AUTH_USER_MODEL)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_adjustments', to='accounts.business')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_adjustments_created', to=settings.AUTH_USER_MODEL)),
                ('related_sale', models.ForeignKey(blank=True, help_text='Related sale for customer returns', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_adjustments', to='sales.sale')),
                ('related_transfer', models.ForeignKey(blank=True, help_text='Related transfer for transfer adjustments', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_adjustments', to='inventory.transfer')),
                ('stock_product', models.ForeignKey(help_text='The stock batch being adjusted', on_delete=django.db.models.deletion.CASCADE, related_name='adjustments', to='inventory.stockproduct')),
            ],
            options={
                'db_table': 'stock_adjustments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StockAdjustmentDocument',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('document', models.FileField(upload_to='stock_adjustments/docs/%Y/%m/')),
                ('document_type', models.CharField(choices=[('RECEIPT', 'Receipt'), ('INVOICE', 'Invoice'), ('POLICE_REPORT', 'Police Report'), ('INSURANCE_CLAIM', 'Insurance Claim'), ('SUPPLIER_RMA', 'Supplier RMA'), ('COUNT_SHEET', 'Physical Count Sheet'), ('OTHER', 'Other')], max_length=50)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('adjustment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='inventory.stockadjustment')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'stock_adjustment_documents',
                'ordering': ['uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='StockAdjustmentPhoto',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('photo', models.ImageField(upload_to='stock_adjustments/%Y/%m/')),
                ('description', models.CharField(blank=True, max_length=255)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('adjustment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='inventory.stockadjustment')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'stock_adjustment_photos',
                'ordering': ['uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='StockCount',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('count_date', models.DateField()),
                ('status', models.CharField(choices=[('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='IN_PROGRESS', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_counts', to='accounts.business')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_counts_created', to=settings.AUTH_USER_MODEL)),
                ('storefront', models.ForeignKey(blank=True, help_text='If specified, count only this storefront', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stock_counts', to='inventory.storefront')),
                ('warehouse', models.ForeignKey(blank=True, help_text='If specified, count only this warehouse', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stock_counts', to='inventory.warehouse')),
            ],
            options={
                'db_table': 'stock_counts',
                'ordering': ['-count_date'],
            },
        ),
        migrations.CreateModel(
            name='StockCountItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('system_quantity', models.IntegerField(help_text='Quantity in system')),
                ('counted_quantity', models.IntegerField(help_text='Actual counted quantity')),
                ('discrepancy', models.IntegerField(help_text='Difference (counted - system)')),
                ('counter_name', models.CharField(blank=True, max_length=255)),
                ('notes', models.TextField(blank=True)),
                ('counted_at', models.DateTimeField(auto_now_add=True)),
                ('adjustment_created', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='count_items', to='inventory.stockadjustment')),
                ('stock_count', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='inventory.stockcount')),
                ('stock_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='count_items', to='inventory.stockproduct')),
            ],
            options={
                'db_table': 'stock_count_items',
                'ordering': ['stock_count', 'stock_product'],
            },
        ),
        migrations.AddIndex(
            model_name='stockadjustment',
            index=models.Index(fields=['business', 'adjustment_type'], name='stock_adjus_busines_284115_idx'),
        ),
        migrations.AddIndex(
            model_name='stockadjustment',
            index=models.Index(fields=['stock_product', 'status'], name='stock_adjus_stock_p_da8c4d_idx'),
        ),
        migrations.AddIndex(
            model_name='stockadjustment',
            index=models.Index(fields=['created_at'], name='stock_adjus_created_71b4ca_idx'),
        ),
        migrations.AddIndex(
            model_name='stockadjustment',
            index=models.Index(fields=['status', 'requires_approval'], name='stock_adjus_status_256042_idx'),
        ),
        migrations.AddIndex(
            model_name='stockcount',
            index=models.Index(fields=['business', 'status'], name='stock_count_busines_d07017_idx'),
        ),
        migrations.AddIndex(
            model_name='stockcount',
            index=models.Index(fields=['count_date'], name='stock_count_count_d_043334_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='stockcountitem',
            unique_together={('stock_count', 'stock_product')},
        ),
    ]
