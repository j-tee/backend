# Generated by Django 5.2.6 on 2025-09-30 16:39

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('arrival_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'stock_batches',
                'ordering': ['-arrival_date', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('contact_person', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=50, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'suppliers',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='inventory.category')),
            ],
            options={
                'verbose_name_plural': 'categories',
                'db_table': 'categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('sku', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('unit', models.CharField(default='pcs', max_length=50)),
                ('retail_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('wholesale_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='products', to='inventory.category')),
            ],
            options={
                'db_table': 'products',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='StockProduct',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('quantity', models.PositiveIntegerField()),
                ('unit_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('unit_tax_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('unit_tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('unit_additional_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_items', to='inventory.product')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='inventory.stock')),
                ('supplier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_products', to='inventory.supplier')),
            ],
            options={
                'db_table': 'stock',
                'ordering': ['product__name', 'stock__warehouse__name'],
            },
        ),
        migrations.CreateModel(
            name='StoreFront',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('location', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_stores', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='store_fronts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'storefronts',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BusinessStoreFront',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='business_storefronts', to='accounts.business')),
                ('storefront', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='business_link', to='inventory.storefront')),
            ],
            options={
                'db_table': 'business_storefronts',
                'ordering': ['business__name', 'storefront__name'],
            },
        ),
        migrations.CreateModel(
            name='StoreFrontEmployee',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('OWNER', 'Owner'), ('ADMIN', 'Administrator'), ('MANAGER', 'Manager'), ('STAFF', 'Staff')], default='STAFF', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('removed_at', models.DateTimeField(blank=True, null=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='storefront_employees', to='accounts.business')),
                ('storefront', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employees', to='inventory.storefront')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='storefront_assignments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'storefront_employees',
                'ordering': ['storefront__name', 'user__name'],
            },
        ),
        migrations.CreateModel(
            name='Warehouse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('location', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_warehouses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'warehouses',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Transfer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_TRANSIT', 'In Transit'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('note', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_transfers', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfers', to='inventory.product')),
                ('requested_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requested_transfers', to=settings.AUTH_USER_MODEL)),
                ('stock', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transfers', to='inventory.stockproduct')),
                ('to_storefront', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inbound_transfers', to='inventory.storefront')),
                ('from_warehouse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outbound_transfers', to='inventory.warehouse')),
            ],
            options={
                'db_table': 'transfers',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StockAlert',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('alert_type', models.CharField(choices=[('LOW_STOCK', 'Low Stock'), ('OUT_OF_STOCK', 'Out of Stock'), ('EXPIRY_WARNING', 'Expiry Warning')], max_length=20)),
                ('current_quantity', models.IntegerField()),
                ('threshold_quantity', models.IntegerField()),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_alerts', to='inventory.product')),
                ('warehouse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_alerts', to='inventory.warehouse')),
            ],
            options={
                'db_table': 'stock_alerts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='stock',
            name='warehouse',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_batches', to='inventory.warehouse'),
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='inventory.product')),
                ('stock', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventory_entries', to='inventory.stockproduct')),
                ('warehouse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='inventory.warehouse')),
            ],
            options={
                'db_table': 'inventory',
            },
        ),
        migrations.CreateModel(
            name='BusinessWarehouse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='business_warehouses', to='accounts.business')),
                ('warehouse', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='business_link', to='inventory.warehouse')),
            ],
            options={
                'db_table': 'business_warehouses',
                'ordering': ['business__name', 'warehouse__name'],
            },
        ),
        migrations.CreateModel(
            name='WarehouseEmployee',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('OWNER', 'Owner'), ('ADMIN', 'Administrator'), ('MANAGER', 'Manager'), ('STAFF', 'Staff')], default='STAFF', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('removed_at', models.DateTimeField(blank=True, null=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='warehouse_employees', to='accounts.business')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='warehouse_assignments', to=settings.AUTH_USER_MODEL)),
                ('warehouse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employees', to='inventory.warehouse')),
            ],
            options={
                'db_table': 'warehouse_employees',
                'ordering': ['warehouse__name', 'user__name'],
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['sku'], name='products_sku_fe2039_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category', 'is_active'], name='products_categor_9e60b3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='storefrontemployee',
            unique_together={('storefront', 'user')},
        ),
        migrations.AddIndex(
            model_name='stockproduct',
            index=models.Index(fields=['stock', 'product'], name='stock_stock_i_7df94b_idx'),
        ),
        migrations.AddIndex(
            model_name='stockproduct',
            index=models.Index(fields=['product', 'expiry_date'], name='stock_product_117577_idx'),
        ),
        migrations.AddIndex(
            model_name='stockproduct',
            index=models.Index(fields=['supplier'], name='stock_supplie_a23fb0_idx'),
        ),
        migrations.AddConstraint(
            model_name='stockproduct',
            constraint=models.UniqueConstraint(fields=('stock', 'product', 'supplier', 'expiry_date'), name='stock_unique_product_supplier_expiry'),
        ),
        migrations.AddIndex(
            model_name='transfer',
            index=models.Index(fields=['from_warehouse', 'status'], name='transfers_from_wa_ffe2e9_idx'),
        ),
        migrations.AddIndex(
            model_name='transfer',
            index=models.Index(fields=['to_storefront', 'status'], name='transfers_to_stor_fe2985_idx'),
        ),
        migrations.AddIndex(
            model_name='transfer',
            index=models.Index(fields=['created_at'], name='transfers_created_c46a4f_idx'),
        ),
        migrations.AddIndex(
            model_name='stockalert',
            index=models.Index(fields=['warehouse', 'is_resolved'], name='stock_alert_warehou_2b9f73_idx'),
        ),
        migrations.AddIndex(
            model_name='stockalert',
            index=models.Index(fields=['alert_type', 'is_resolved'], name='stock_alert_alert_t_6efdea_idx'),
        ),
        migrations.AddIndex(
            model_name='stock',
            index=models.Index(fields=['warehouse', 'arrival_date'], name='stock_batch_warehou_72bf35_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['product', 'warehouse'], name='inventory_product_5c401c_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['warehouse', 'quantity'], name='inventory_warehou_adc778_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['stock', 'warehouse'], name='inventory_stock_i_fbc2c8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='inventory',
            unique_together={('product', 'warehouse', 'stock')},
        ),
        migrations.AlterUniqueTogether(
            name='warehouseemployee',
            unique_together={('warehouse', 'user')},
        ),
    ]
