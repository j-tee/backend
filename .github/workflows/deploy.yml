name: Deploy to Production

on:
  push:
    branches:
      - main  # Deploy when pushing to main branch
  workflow_dispatch:  # Allow manual deployment

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests
        env:
          DB_NAME: test_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: False
          REDIS_URL: redis://localhost:6379
          USE_REDIS_CACHE: True
        run: |
          python manage.py test
  
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            cd /var/www/pos/backend
            
            # Pull latest code
            git pull origin main
            
            # Activate virtual environment
            source venv/bin/activate
            
            # Install/update dependencies
            pip install -r requirements.txt
            
            # Run migrations
            python manage.py migrate --noinput
            
            # Collect static files
            python manage.py collectstatic --noinput
            
            # Set DJANGO_ENV_FILE for production
            export DJANGO_ENV_FILE=/var/www/pos/backend/.env.production
            
            # Restart services
            sudo systemctl restart posbackend
            sudo systemctl restart posbackend-celery
            sudo systemctl restart posbackend-celery-beat
            
            # Reload Nginx (handles systemd, init.d, or source-compiled)
            if systemctl list-unit-files 2>/dev/null | grep -q nginx.service; then
              sudo systemctl reload nginx
            elif [ -f /etc/init.d/nginx ]; then
              sudo /etc/init.d/nginx reload
            else
              sudo nginx -t && sudo nginx -s reload
            fi
            
            # Check service status
            sudo systemctl status posbackend --no-pager
